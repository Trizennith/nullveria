// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DB_CONNECTION_STRING")
  shadowDatabaseUrl = env("DB_CONNECTION_STRING_SHADOW")
}

model User {
  id                   Int           @id @default(autoincrement())
  userName             String        @unique
  phoneNumber          String?       @unique
  phonneNumberVerified Boolean       @default(false)
  emailVerified        Boolean       @default(false)
  firstName            String
  lastName             String
  fullName             String
  email                String        @unique
  password             String
  role                 String        @default("user") // Add role attribute with default value
  isActive             Boolean       @default(true)
  isVerified           Boolean       @default(false)
  address              UserAddress?
  totalLogins          Int           @default(0)
  loginData            UserSession[]
  updatedAt            DateTime      @updatedAt
  createdAt            DateTime      @default(now())
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  user       User     @relation(fields: [userId], references: [id])
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model RefreshToken {
  id            String      @id @default(uuid())
  userSessionID Int         @unique
  fingerprint   String
  hashedToken   String      @unique // SHA-256 hash
  expiresAt     DateTime
  revoked       Boolean     @default(false)
  UserSession   UserSession @relation(fields: [userSessionID], references: [id])
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
}

model UserSession {
  id             Int           @id @default(autoincrement())
  sessionId      String        @unique
  userId         Int
  loginTime      DateTime      @default(now())
  logoutTime     DateTime?
  ipAddress      String?
  userAgent      String?
  location       String?
  additionalInfo Json?
  User           User          @relation(fields: [userId], references: [id])
  refreshToken   RefreshToken? @relation
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
}
